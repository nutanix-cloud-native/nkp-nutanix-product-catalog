apiVersion: v1
kind: ServiceAccount
metadata:
  name: nai-postinstall
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook": "post-install"
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": hook-succeeded
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: nai-postinstall
  annotations:
    "helm.sh/hook": "post-install"
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": hook-succeeded
rules:
  - apiGroups: [""]
    resources: ["configmaps", "services"]
    verbs: ["get", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: nai-postinstall
  annotations:
    "helm.sh/hook": "post-install"
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": hook-succeeded
subjects:
  - kind: ServiceAccount
    name: nai-postinstall
    namespace: {{ .Release.Namespace }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: nai-postinstall
---
apiVersion: batch/v1
kind: Job
metadata:
  name: nai-postinstall
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook": "post-install"
    "helm.sh/hook-weight": "2"
    "helm.sh/hook-delete-policy": hook-succeeded
spec:
  backoffLimit: 3
  template:
    spec:
      serviceAccountName: nai-postinstall
      restartPolicy: OnFailure
      containers:
        - name: post-install-nai-patch
          image: bitnami/kubectl:1.30.5
          imagePullPolicy: IfNotPresent
          command:
            - /bin/sh
            - -c
            - |
              echo "Waiting for istio-ingressgateway external IP/FQDN..."

              for i in $(seq 1 5); do
                IP=$(kubectl get svc istio-ingressgateway -n istio-system -ojsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null)
                HOSTNAME=$(kubectl get svc istio-ingressgateway -n istio-system -ojsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null)
                if [ -n "$IP" ] || [ -n "$HOSTNAME" ]; then
                  break
                fi
                echo "Waiting..."; sleep 2
              done

              ENDPOINT="https://${IP:-$HOSTNAME}/"
              echo "Endpoint resolved: $ENDPOINT"

              kubectl patch configmap nai-ui -n {{ .Release.Namespace }} \
                -p "{\"data\":{\"dashboardLink\":\"${ENDPOINT}\"}}"

              echo "Dashboard link updated successfully."
