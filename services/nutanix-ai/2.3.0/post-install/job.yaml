apiVersion: batch/v1
kind: Job
metadata:
  name: nai-postinstall
spec:
  backoffLimit: 3
  ttlSecondsAfterFinished: null
  template:
    spec:
      serviceAccountName: nai-postinstall
      restartPolicy: OnFailure
      containers:
        - name: post-install-nai-patch
          image: bitnami/kubectl:1.30.5
          imagePullPolicy: IfNotPresent
          env:
            - name: WORKSPACE_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: KUBECONFIG
              value: /opt/bitnami/kubectl/.kube/config
          command:
            - /bin/sh
            - -c
            - |
              set -eu

              echo "Waiting for istio-ingressgateway external IP/FQDN..."

              for i in $(seq 1 60); do
                RAW_IP=$(kubectl get svc istio-ingressgateway -n istio-system -ojsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || true)
                RAW_HOSTNAME=$(kubectl get svc istio-ingressgateway -n istio-system -ojsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || true)
                IP=$(echo "$RAW_IP" | tr -d '\n\r ')
                HOSTNAME=$(echo "$RAW_HOSTNAME" | tr -d '\n\r ')
                echo "Current IP: '$IP'"
                echo "Current HOSTNAME: '$HOSTNAME'"
                if [ -n "$IP" ] || [ -n "$HOSTNAME" ]; then
                  break
                fi
                echo "Waiting..."; sleep 5
              done

              echo "IP: $IP"
              echo "HOSTNAME: $HOSTNAME"

              if [ -z "$IP" ] && [ -z "$HOSTNAME" ]; then
                echo "ERROR: Could not resolve istio ingress IP or HOSTNAME"
                exit 1
              fi

              ENDPOINT=""
              if [ -n "$IP" ]; then
                ENDPOINT="https://${IP}/"
              elif [ -n "$HOSTNAME" ]; then
                ENDPOINT="https://${HOSTNAME}/"
              fi

              echo "Endpoint resolved: $ENDPOINT"

              PAYLOAD="{\"data\": {\"dashboardLink\": \"${ENDPOINT}\"}}"

              echo "Payload to patch:"
              echo "$PAYLOAD"

              kubectl patch configmap nai-ui -n "$WORKSPACE_NAMESPACE" \
                --type=merge -p "$PAYLOAD"

              echo "Dashboard link updated successfully."
